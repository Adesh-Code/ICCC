/* 
* Implements SASS for text link component.
*
* @theme: 'light' (default), 'dark'
*/
@use "@iccc/theme-data/lib/build/scss/light/design-tokens.scss" as light;
@use "@iccc/theme-data/lib/build/scss/dark/design-tokens.scss" as dark;

@mixin iccc-textLink($theme: "light", $semantic: false) {
  cursor: pointer;
  text-decoration: underline;
  text-decoration-skip-ink: auto;

  @if ($theme == "dark") {
    color: dark.$tokens-textLink-defaultState-color;
    outline: dark.$tokens-textLink-defaultState-outlineWidth
      dark.$tokens-textLink-defaultState-outlineStyle
      dark.$tokens-textLink-defaultState-outlineColor;
    outline-offset: dark.$tokens-textLink-defaultState-outlineOffset;
    text-decoration-color: dark.$tokens-textLink-defaultState-textDecorationColor;
    text-decoration-thickness: dark.$tokens-textLink-defaultState-textDecorationThickness;

    &:visited {
      @if ($semantic) {
        &:not(.MuiButtonBase-root) {
          color: dark.$tokens-textLink-visitedState-color;
        }
      } @else {
        color: dark.$tokens-textLink-visitedState-color;
      }
      outline: dark.$tokens-textLink-visitedState-outlineWidth
        dark.$tokens-textLink-visitedState-outlineStyle
        dark.$tokens-textLink-visitedState-outlineColor;
      outline-offset: dark.$tokens-textLink-visitedState-outlineOffset;
      text-decoration-color: dark.$tokens-textLink-visitedState-textDecorationColor;
      text-decoration-thickness: dark.$tokens-textLink-visitedState-textDecorationThickness;
    }

    &:hover,
    :visited:hover {
      color: dark.$tokens-textLink-hoverState-color;
      outline: dark.$tokens-textLink-hoverState-outlineWidth
        dark.$tokens-textLink-hoverState-outlineStyle
        dark.$tokens-textLink-hoverState-outlineColor;
      outline-offset: dark.$tokens-textLink-hoverState-outlineOffset;
      text-decoration-color: dark.$tokens-textLink-hoverState-textDecorationColor;
      text-decoration-thickness: dark.$tokens-textLink-hoverState-textDecorationThickness;
    }

    &:focus-visible {
      color: dark.$tokens-textLink-focusState-color;
      outline: dark.$tokens-textLink-focusState-outlineWidth
        dark.$tokens-textLink-focusState-outlineStyle
        dark.$tokens-textLink-focusState-outlineColor;
      outline-offset: dark.$tokens-textLink-focusState-outlineOffset;
      text-decoration-color: dark.$tokens-textLink-focusState-textDecorationColor;
      text-decoration-thickness: dark.$tokens-textLink-focusState-textDecorationThickness;
    }

    &:active {
      color: dark.$tokens-textLink-pressedState-color;
      outline: dark.$tokens-textLink-pressedState-outlineWidth
        dark.$tokens-textLink-pressedState-outlineStyle
        dark.$tokens-textLink-pressedState-outlineColor;
      outline-offset: dark.$tokens-textLink-pressedState-outlineOffset;
      text-decoration-color: dark.$tokens-textLink-pressedState-textDecorationColor;
      text-decoration-thickness: dark.$tokens-textLink-pressedState-textDecorationThickness;
    }
  } @else {
    color: light.$tokens-textLink-defaultState-color;
    outline: light.$tokens-textLink-defaultState-outlineWidth
      light.$tokens-textLink-defaultState-outlineStyle
      light.$tokens-textLink-defaultState-outlineColor;
    outline-offset: light.$tokens-textLink-defaultState-outlineOffset;
    text-decoration-color: light.$tokens-textLink-defaultState-textDecorationColor;
    text-decoration-thickness: light.$tokens-textLink-defaultState-textDecorationThickness;

    &:visited {
      @if ($semantic) {
        &:not(.MuiButtonBase-root) {
          color: light.$tokens-textLink-visitedState-color;
        }
      } @else {
        color: light.$tokens-textLink-visitedState-color;
      }
      outline: light.$tokens-textLink-visitedState-outlineWidth
        light.$tokens-textLink-visitedState-outlineStyle
        light.$tokens-textLink-visitedState-outlineColor;
      outline-offset: light.$tokens-textLink-visitedState-outlineOffset;
      text-decoration-color: light.$tokens-textLink-visitedState-textDecorationColor;
      text-decoration-thickness: light.$tokens-textLink-visitedState-textDecorationThickness;
    }

    &:hover,
    :visited:hover {
      color: light.$tokens-textLink-hoverState-color;
      outline: light.$tokens-textLink-hoverState-outlineWidth
        light.$tokens-textLink-hoverState-outlineStyle
        light.$tokens-textLink-hoverState-outlineColor;
      outline-offset: light.$tokens-textLink-hoverState-outlineOffset;
      text-decoration-color: light.$tokens-textLink-hoverState-textDecorationColor;
      text-decoration-thickness: light.$tokens-textLink-hoverState-textDecorationThickness;
    }

    &:focus-visible {
      color: light.$tokens-textLink-focusState-color;
      outline: light.$tokens-textLink-focusState-outlineWidth
        light.$tokens-textLink-focusState-outlineStyle
        light.$tokens-textLink-focusState-outlineColor;
      outline-offset: light.$tokens-textLink-focusState-outlineOffset;
      text-decoration-color: light.$tokens-textLink-focusState-textDecorationColor;
      text-decoration-thickness: light.$tokens-textLink-focusState-textDecorationThickness;
    }

    &:active {
      color: light.$tokens-textLink-pressedState-color;
      outline: light.$tokens-textLink-pressedState-outlineWidth
        light.$tokens-textLink-pressedState-outlineStyle
        light.$tokens-textLink-pressedState-outlineColor;
      outline-offset: light.$tokens-textLink-pressedState-outlineOffset;
      text-decoration-color: light.$tokens-textLink-pressedState-textDecorationColor;
      text-decoration-thickness: light.$tokens-textLink-pressedState-textDecorationThickness;
    }
  }
}
